inc "./lib/buffer.slh"

class buffer
  oper proc init 0 0
    var tmpchar 8
    
    buffer.buffers 8 dlist.new put disc
    
    buffer.buffers read
    buffer.SIZE heap.zalloc
    tmpchar swap put
    dlist.append
    disc

    "kol" cstr.println

    buffer.current read buffer.rows .
    0 heap.zalloc
    put disc

    buffer.current read buffer.status . str.new put disc

    ret
  end

  oper proc add 0 0
    var tmpchar 8

    buffer.buffers read
    buffer.SIZE heap.zalloc
    tmpchar swap put
    dlist.append
    dlist.size . read 1 -
    buffer.idx swap put disc
    
    tmpchar 0 put disc

    buffer.current read buffer.rows .
    0 heap.zalloc
    put disc  

    buffer.current read buffer.status . str.new put disc

    ret
  end

  oper proc str 1 1
    var buff 8
    var line 8
    var row 8

    buff swap put disc

    line str.new put disc

    0
    do
      buff read
      covr
      buffer.getrow
      row swap put disc

      row read NULL == if ret end

      row read erow.chars . read
      row read erow.size . read + 0 putc disc

      line read
      row read erow.chars . read str.catc
      "\n" str.catc
      line swap put disc

      1 +
      copy buff read buffer.numrows . read 1 - <
    end
    disc

    line read

    ret
  end

  oper proc current 0 1
    buffer.buffers read
    buffer.idx read
    dlist.getptr

    ret
  end
  
  oper proc cnt 0 1
    buffer.buffers read
    dlist.len

    ret
  end

  oper proc cycle 1 0
    buffer.idx read +
    buffer.cnt /% swap disc
    buffer.idx swap put disc

    ret
  end

  oper proc getrow 2 1
    var buff 8

    swap buff swap put disc

    copy buff read buffer.numrows . read > if
      disc
      NULL
      ret
    end

    8 *
    buff read 
    buffer.rows . read + read

    ret
  end

  oper proc setstatus 2 0
    var buff 8

    swap buff swap put disc

    buff read buffer.status . read swap
    copy cstr.len swap str.sput
    buff read buffer.status . swap put disc

    buff read buffer.status . read
    copy str.size . read
    swap str.data . + 0 putc disc

    ret
  end

  oper proc appendstatus 2 0
    var buff 8

    swap buff swap put disc

    buff read buffer.status . read
    swap str.catc
    buff read buffer.status . swap put disc

    buff read buffer.status . read
    copy str.size . read
    swap str.data . + 0 putc disc

    ret
  end

  oper proc rownumber 1 1
    1 +

    ret
  end

  oper proc open 2 0
    var buff 8
    var fp 8

    var line 8
    var tmpchar 8

    swap buff swap put disc

    buff read buffer.filename . read NULL !=
    buff read buffer.dirty . read 0 != ||
    if
      buffer.add

      buffer.current read buff swap put disc
    end

    copy buff read buffer.filename . swap put disc

    filestream.new
    fp swap put disc

    {TODO: Extract}

    0
    do
      buff read 
      covr buffer.getrow NULL == if brk end

      buff read
      covr buffer.getrow erow.free
      
      1 +

      1
    end
    disc
  
    buff read buffer.numrows . 0 put disc

    fp read NULL == if
      buff read
      "" editor.insertrow
      disc

      ret
    end

    do
      line str.new put disc
      tmpchar 0 put disc
      do
        tmpchar
        fp read filestream.readchar
        putc disc

        
        line read
        tmpchar str.catc
        line swap put disc 

        tmpchar readc
        copy 10 == ||
        covr 13 == ||
        swap 0 == || !
      end
      tmpchar readc 0 ==
      line read str.size . read 0 == && !
      if
        buff read
        line read str.data . editor.insertrow
        buff read buffer.cy . copy read 1 + put disc
      end

      line read str.free
      
      tmpchar readc 0 !=
    end

    buff read buffer.cx . 0 put disc
    buff read buffer.cy . 0 put disc

    buff read
    "Opened " buffer.setstatus
    buff read
    buff read buffer.filename . read buffer.appendstatus

    buff read buffer.updateft

    disc

    ret
  end

  oper proc save 1 0
    var buff 8
    var fp 8
    var data 8

    buff swap put disc

    buff read buffer.filename . read NULL == if
      "Save As: " prompt.show
      copy NULL == if disc ret end

      buff read buffer.filename . swap put disc

      buff read buffer.updateft
    end

    buff read buffer.str data swap put disc

    511
    65
    buff read buffer.filename . read
    -100
    os.openf
    fp swap put disc

    data read str.size . read
    fp read
    77
    sys2
    disc

    data read str.size . read
    data read str.data . 
    fp read
    os.writef

    fp read
    os.closef
    
    buff read
    "Wrote " buffer.setstatus
    buff read
    data read str.size . read int.cstr buffer.appendstatus
    buff read
    " bytes" buffer.appendstatus
    
    data read str.free

    buff read buffer.dirty . 0 put disc

    ret
  end

  oper proc updateft 1 0
    var buff 8
    var filetype 8
    var tmpchar 8

    buff swap put disc

    filetype (str.new) put disc

    tmpchar 0 put disc

    buff read buffer.filename . read
    do
      tmpchar
      covr readc
      putc disc

      filetype read
      tmpchar str.catc
      filetype swap put disc

      tmpchar readc '.' == if
        filetype read str.size . 0 put disc
      end

      1 +
      copy readc 0 !=
    end
    disc

    0
    do
      buff read
      covr buffer.getrow NULL == if brk end
      
      buff read
      covr buffer.getrow
      erow.resetrender
      
      1 +

      1
    end
    disc

    filetype read str.data .
    filetype read str.size . read + 0 putc disc

    filetype read str.data . "slm" cstr.eq if
      buff read buffer.syntax .
      "brk\0nop\0ret\0asm\0quit\0copy\0covr\0readc\0read\0putc\0put\0disc\0argv\0argc\0envp\0of\0temp\0push\0oper\0-\0*\0,\0/%\0+\0^\0!=\0!\0==\0<\0>\0&&\0~\0()\0sys0\0sys1\0sys2\0sys3\0sys4\0sys5\0sys6\0"
      "sim\0lambda\0swap\0dump\0const\0if\0proc\0do\0end\0inc\0enum\0var\0prop\0class\0cproc\0lnk\0"
      "{" "}" "$$"
      "slam" hi.HLF_NUMBERS hi.HLF_CALLS || hi.HLF_STRINGS || syntax.new
      put disc

      filetype read str.free

      ret
    end

    filetype read str.data . "spk" cstr.eq if
      buff read buffer.syntax .
      "\0"
      "src\0lib\0libd\0"
      "{" "}" "$$"
      "spakig" hi.HLF_STRINGS syntax.new
      put disc

      filetype read str.free

      ret
    end

    filetype read str.free

    ret
  end

  oper proc getrx 1 1
    var row 8
    var length 8
    var rx 8
    var char 8

    row
    buffer.current read
    copy buffer.cy . read
    buffer.getrow
    put disc

    rx 0 put disc

    length swap put disc

    0
    do
      char 0 put disc
      copy row read erow.chars . read + readc
      char swap putc disc

      char readc 9 == if
        do
          rx copy read 1 + put disc

          rx read erow.TABSIZE /% swap disc 0 !=
        end
      end
      char readc 9 != if
        rx copy read 1 + put disc
      end

      1 +
      copy length read <
    end
    disc

    rx read

    ret
  end

  oper proc movecursor 2 0
    var buff 8

    swap buff swap put disc

    copy buffer.BC_UP == if
      buff read buffer.cy . read 0 > if
        buff read buffer.cy . copy read 1 - put disc
      end
    end
    copy buffer.BC_DOWN == if 
      buff read buffer.cy . read
      buff read buffer.numrows . read 1 - < if
        buff read buffer.cy . copy read 1 + put disc
      end
    end
    copy buffer.BC_LEFT == if
      buff read buffer.cx . read 0 != if 
        disc
        buff read buffer.cx . copy read 1 - put disc

        ret
      end
      buff read buffer.cy . read 0 > if 
        buff read buffer.cy . copy read 1 - put disc
        
        buff read buffer.cx .
        buff read copy buffer.cy . read buffer.getrow erow.size . read
        put disc
        
      end
    end
    copy buffer.BC_RIGHT == if
      buff read copy buffer.cy . read buffer.getrow
      NULL != if
        buff read buffer.cx . read 
        buff read copy buffer.cy . read buffer.getrow erow.size . read
        < if 
          disc
          buff read buffer.cx . copy read 1 + put disc

          ret
        end
        buff read buffer.cx . read 
        buff read copy buffer.cy . read buffer.getrow erow.size . read
        == if 
          buff read buffer.cy . copy read 1 + put disc
          disc
          buff read buffer.cx . 0 put disc

          ret
        end
      end
    end
    disc

    buff read buffer.cx . read 
    buff read copy buffer.cy . read buffer.getrow erow.size . read > if
      buff read buffer.cx .
      buff read copy buffer.cy . read buffer.getrow erow.size . read
      put disc
    end
    
    ret
  end
  
  oper proc updatescroll 1 0
    var buff 8

    buff swap put disc

    buff read buffer.rx .
    0 put disc

    buff read buffer.cy . read
    buff read buffer.numrows . read < if
      buff read buffer.rx .
      buff read buffer.cx . read
      buffer.getrx put disc
    end

    buff read buffer.sy . read 
    buff read buffer.cy . read > if
      buff read buffer.sy .
      buff read buffer.cy . read
      put disc
    end

    buff read buffer.sy . read 
    screen.height read +
    buff read buffer.cy . read > ! if
      buff read buffer.sy .

      buff read buffer.cy . read
      screen.height read - 1 +
      
      put disc
    end
    buff read buffer.sx . read 
    buff read buffer.rx . read > if
      buff read buffer.sx .
      buff read buffer.rx . read
      put disc
    end

    buff read buffer.sx . read 
    screen.width read +
    buff read buffer.rx . read > ! if
      buff read buffer.sx .

      buff read buffer.rx . read
      screen.width read - 1 +
      
      put disc
    end

    ret
  end

  oper proc render 1 0
    var buff 8

    buff swap put disc

    0
    do
      buff read buffer.sy . read covr +
      buff read swap
      buffer.getrow
      copy NULL != if
        covr buff read buffer.sy . read +
        covr erow.idx . swap put disc
      end
      erow.renderbuff
      
      1 +
      copy screen.height read <
    end
    disc

    ret
  end
end
