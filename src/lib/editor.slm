inc "./lib/editor.slh"

class editor
  oper proc insertrow 2 0
    var text 8
    var buff 8
    var cy 8
    var row 8

    text swap put disc
    buff swap put disc

    buff read buffer.cy . read
    cy swap put disc

    cy read 0 < 
    cy read
    buff read buffer.numrows . read > ||
    if
      ret
    end

    buff read buffer.rows . read
    buff read buffer.numrows . read 1 + int.SIZE *
    heap.realloc
    buff read buffer.rows . swap put disc

    buff read buffer.numrows . copy read 1 + put disc

    buff read buffer.numrows . read 1 != if
      buff read buffer.rows . read cy read int.SIZE * +
      buff read buffer.rows . read cy read 1 + int.SIZE * +
      buff read buffer.numrows . read cy read - 1 - int.SIZE *
      mem.mov
    end

    row
    erow.SIZE heap.zalloc
    put disc

    row read erow.size .
    text read cstr.len
    put disc

    row read erow.chars .
    text read cstr.len 1 + heap.zalloc
    put disc

    row read erow.chars . read
    text read
    text read cstr.len
    mem.cpy

    row read
    erow.resetrender

    buff read buffer.rows . read
    text read int.SIZE * +
    row read
    put disc

    ret
  end

  oper proc insertchar 2 0
    var buff 8
    var cx 8

    swap buff swap put disc

    buff read copy buffer.cy . read buffer.getrow erow.chars . read
    buff read copy buffer.cy . read buffer.getrow erow.size . read 2 +
    heap.realloc
    buff read copy buffer.cy . read buffer.getrow erow.chars . swap put disc

    buff read buffer.cx . read
    cx swap put disc
    
    cx read 0 < 
    cx read
    buff read copy buffer.cy . read buffer.getrow erow.size . read > ||
    if 
      disc
      buff read copy buffer.cy . read buffer.getrow erow.size . read
    end

    buff read copy buffer.cy . read buffer.getrow erow.chars . read cx read +
    buff read copy buffer.cy . read buffer.getrow erow.chars . read cx read + 1 +
    buff read copy buffer.cy . read buffer.getrow erow.size . read cx read - 1 +
    mem.mov

    buff read copy buffer.cy . read buffer.getrow erow.size . copy read 1 + put disc

    buff read buffer.cx . copy read 1 + put disc
    
    buff read copy buffer.cy . read buffer.getrow erow.chars . read
    cx read + swap putc disc

    buff read
    buff read buffer.cy . read
    buffer.getrow erow.resetrender

    ret
  end

  oper proc insertreturn 1 0
    var buff 8

    buff swap put disc

    buff read buffer.cy . copy read 1 + put disc
    buff read copy buffer.cy . read 1 - buffer.getrow erow.chars . read
    buff read buffer.cx . read +
    buff read swap
    editor.insertrow
    buff read copy buffer.cy . read 1 - buffer.getrow erow.chars . read
    buff read buffer.cx . read + 0 putc disc

    buff read copy buffer.cy . read 1 - buffer.getrow erow.size .
    buff read buffer.cx . read
    put disc

    buff read
    buff read buffer.cy . read
    buffer.getrow erow.resetrender

    buff read
    buff read buffer.cy . read 1 -
    buffer.getrow erow.resetrender

    buff read buffer.cx . 0 put disc

    ret
  end

  oper proc appendrow 2 0
    var buff 8
    var str 8
    var idx 8

    idx swap put disc
    buff swap put disc

    str str.new put disc

    str read
    buff read
    idx read buffer.getrow erow.chars . read str.catc
    buff read
    idx read 1 + buffer.getrow erow.chars . read str.catc
    str swap put disc

    buff read
    idx read buffer.getrow erow.chars . read
    str read str.size . read
    heap.realloc
    buff read
    idx read buffer.getrow erow.chars . swap put disc
    
    buff read
    idx read buffer.getrow erow.chars . read
    str read str.data .
    str read str.size . read
    mem.cpy

    buff read
    idx read buffer.getrow erow.size .
    str read str.size . read
    put disc
    
    str read str.free

    buff read
    buff read buffer.cy . read
    buffer.getrow erow.resetrender

    ret
  end

  oper proc delrow 2 0
    var buff 8
    var idx 8

    idx swap put disc
    buff swap put disc

    buff read
    idx read
    buffer.getrow erow.free
    
    idx read 1 + int.SIZE *
    buff read buffer.rows . read + 
    idx read int.SIZE *
    buff read buffer.rows . read + 
    buff read buffer.numrows . read idx read - int.SIZE *
    mem.mov

    buff read buffer.numrows . copy read 1 - put disc

    ret
  end

  oper proc delchar 2 0
    var buff 8
    var idx 8

    idx swap put disc
    buff swap put disc
  
    idx read -1 ==
    buff read buffer.cy . read 0 == && if ret end

    idx read -1 == if
      buff read buffer.cx .
      buff read copy buffer.cy . read 1 - buffer.getrow erow.size . read
      put disc

      buff read copy buffer.cy . read 1 -
      editor.appendrow
      buff read copy buffer.cy . read
      editor.delrow
      buff read buffer.cy . copy read 1 - put disc

      buff read
      buff read buffer.cy . read
      buffer.getrow erow.resetrender

      ret
    end
    
    idx read 0 < 
    idx read
    buff read copy buffer.cy . read buffer.getrow erow.size . read < ! ||
    if
      ret
    end

    buff read copy buffer.cy . read buffer.getrow erow.chars . read idx read + 1 +
    buff read copy buffer.cy . read buffer.getrow erow.chars . read idx read +
    buff read copy buffer.cy . read buffer.getrow erow.size . read idx read - 1 +
    mem.mov

    buff read copy buffer.cy . read buffer.getrow erow.size . copy read 1 - put disc

    buff read buffer.cx . copy read 1 - put disc

    buff read
    buff read buffer.cy . read
    buffer.getrow erow.resetrender

    ret
  end
end
