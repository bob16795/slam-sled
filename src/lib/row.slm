inc "./lib/row.slh"

class erow
  oper proc updaterender 1 0
    var row 8
    var res 8
    var char 8

    row swap put disc

    row read erow.render . read NULL != if
      ret
    end
    
    res str.new put disc
    char 0 put disc

    0
    do
      copy row read erow.chars . read + readc
      char swap putc disc

      char readc 9 == if
        res read
        do
          " " str.catc

          copy str.size . read erow.TABSIZE /% swap disc 0 !=
        end
        res swap put disc
      end
      char readc 9 != if
        res read
        char str.catc
        res swap put disc
      end
      
      1 +
      copy row read erow.size . read <
    end
    disc

    char 0 put disc

    row read erow.rsize .
    res read str.size . read 1 -
    put disc
    
    row read erow.render .
    res read str.size . read
    heap.zalloc
    put disc

    row read erow.render . read
    res read str.data .
    res read str.size . read
    mem.cpy
  
    row read erow.resethi
    
    res read str.free

    ret
  end

  oper proc updatehi 1 0
    var incomment 8
    var instring 8
    var linecomm 8
    var incall 8
    var prevhi 8
    var prevsep 8
    var scslen 8
    var mcslen 8
    var mcelen 8
    var char 8
    var row 8

    row read erow.hl . read NULL != if
      disc

      ret
    end

    row read erow.hl .
    row read erow.rsize . read heap.zalloc
    put disc

    buffer.current read buffer.syntax . read NULL == if
      disc ret
    end

    row read erow.idx . read 0 != if
      buffer.current read
      row read erow.idx . read 1 -
      buffer.getrow erow.hlopencomment . read
      incomment swap put disc
    end

    prevsep 1 put disc
    instring 0 put disc
    linecomm 0 put disc
    incall 0 put disc
    prevhi hi.HL_NORMAL put disc

    scslen 
    buffer.current read buffer.syntax . read syntax.scomment . read
    copy NULL != if cstr.len end
    put disc

    mcslen
    buffer.current read buffer.syntax . read syntax.mcomments . read
    copy NULL != if cstr.len end
    put disc

    mcelen 
    buffer.current read buffer.syntax . read syntax.mcommente . read
    copy NULL != if cstr.len end
    put disc

    0
    do
      char swap put disc

      scslen read 0 !=
      incomment read ! &&
      instring read ! && if
        char read row read erow.render . read +
        buffer.current read buffer.syntax . read syntax.scomment . read
        scslen read
        mem.eq if
          linecomm 1 put disc
        end
      end

      mcslen read 0 != 
      mcelen read 0 != && 
      instring read ! && if
        incomment read
        copy if
          char read row read erow.hl . read + hi.HL_MLCOMMENT putc disc

          char read row read erow.render . read +
          buffer.current read buffer.syntax . read syntax.mcommente . read
          mcelen read
          mem.eq if
            char copy read mcelen read 1 - + put disc
            incomment 0 put disc
            prevsep 1 put disc
          end
        end
        ! 
        char read row read erow.render . read +
        buffer.current read buffer.syntax . read syntax.mcomments . read
        mcslen read 
        mem.eq && if
          char copy read mcslen read 1 - + put disc
          incomment 1 put disc
        end
      end

      prevsep read
      instring read ! &&
      if
        char read row read erow.render . read +
        buffer.current read buffer.syntax . read syntax.kw2 . read
        hi.iskw
        copy if
          char read row read erow.render . read + covr + readc
          terminal.issepr if
            copy
            char read row read erow.hl . read + swap
            hi.HL_KEYWORD2 swap
            mem.set
          end
        end
        disc

        char read row read erow.render . read +
        buffer.current read buffer.syntax . read syntax.kw1 . read
        hi.iskw
        copy if
          char read row read erow.render . read + covr + readc
          terminal.issepr if
            copy
            char read row read erow.hl . read + swap
            hi.HL_KEYWORD1 swap
            mem.set
          end
        end
        disc
      end

      buffer.current read buffer.syntax . read syntax.flags . read
      copy hi.HLF_NUMBERS && if
        char read row read erow.render . read + readc 
        copy '0' < ! swap '9' > ! &&
        prevsep read
        prevhi read hi.HL_NUMBER == || &&
        if 
          char read row read erow.hl . read + hi.HL_NUMBER putc disc
        end

        prevhi
        char read row read erow.hl . read + readc
        put disc
      end
      copy hi.HLF_STRINGS && if
        instring read
        copy if
          char read row read erow.hl . read + hi.HL_STRING putc disc
          char read row read erow.render . read + readc 
          instring read == if
            instring 0 put disc
          end
          prevsep 1 put disc
        end
        0 == if
          char read row read erow.render . read + readc 
          copy '"' ==
          covr '`' == ||
          covr ''' == || if
            instring
            covr
            put disc
            char read row read erow.hl . read + hi.HL_STRING putc disc
          end
          disc
        end
      end
      copy hi.HLF_CALLS && if
        incall read
        copy if
          char read row read erow.hl . read + hi.HL_CALL putc disc
          char read row read erow.render . read + readc 
          incall read == if
            incall 0 put disc
          end
          prevsep 1 put disc
        end
        0 == if
          char read row read erow.render . read + readc 
          copy '(' == if
            incall
            ')'
            put disc
            char read row read erow.hl . read + hi.HL_CALL putc disc
          end
          disc
        end
      end
      disc

      linecomm read 0 != if
        char read row read erow.hl . read + hi.HL_COMMENT putc disc
      end

      incomment read 0 != if
        char read row read erow.hl . read + hi.HL_COMMENT putc disc
      end

      prevsep
      char read row read erow.render . read + readc terminal.issepr
      put disc

      char read 1 +
      char read
      row read erow.rsize . read > !
    end
    disc

    row read erow.hlopencomment .
    incomment read
    covr read covr != if
      buffer.current read
      row read erow.idx . read 1 + buffer.getrow
      NULL != if
        buffer.current read
        row read erow.idx . read 1 + buffer.getrow
        erow.resethi
      end
    end
    put disc

    disc

    ret
  end

  oper proc resetrender 1 0
    var row 8

    row swap put disc

    row read erow.render . read NULL != if
      row read erow.render . read heap.free
      row read erow.render . NULL put disc
    end

    buffer.current read buffer.dirty . copy read 1 + put disc

    ret
  end

  oper proc resethi 1 0
    var row 8

    buffer.current read buffer.syntax . read NULL == if
      disc
      ret
    end

    row swap put disc

    row read erow.hl . read NULL != if
      row read erow.hl . read heap.free
      row read erow.hl . NULL put disc
    end

    ret
  end

  oper proc renderbuff 1 0
    var row 8
    var size 8
    var tmpchar 8
    var outchar 8

    copy NULL == if
      disc

      "~\e[K\r\n" terminal.write
      ret
    end
    row swap put disc

    row read erow.updaterender
    row read erow.updatehi
    row read erow.rsize . read 
    {TODO: tmp.buff}
    buffer.current read buffer.sx . read - 1 +
    size swap put disc

    size read 0 < if
      size 0 put disc
    end
    
    size read
    screen.width read buffer.NUMBERCOL - 1 - > if
      size screen.width read buffer.NUMBERCOL - 1 - put disc
    end

    0 terminal.setbgcolor
    7 terminal.setfgcolor

    terminal.buffer read str.size . read buffer.NUMBERCOL + 1 -
    row read erow.idx . read buffer.rownumber int.cstr cstr.len -

    do
      " " terminal.write

      terminal.buffer read str.size . read 
      covr <
    end
    disc

    row read erow.idx . read buffer.rownumber int.cstr terminal.write
    "â”‚" terminal.write

    0 terminal.setbgcolor
    7 terminal.setfgcolor

    size read 0 > if
      tmpchar 0 put disc
      0
      do
        copy row read erow.render . read +
        buffer.current read buffer.sx . read +
        readc
        tmpchar swap putc disc

        
        7
        row read erow.hl . read
        NULL != if
          disc
          copy row read erow.hl . read +
          buffer.current read buffer.sx . read +
          readc hi.hltocolor
        end
        terminal.setfgcolor
        
        tmpchar readc terminal.iscntrl ! if
          tmpchar terminal.write
        end
        tmpchar readc terminal.iscntrl if
          7 terminal.setbgcolor
          0 terminal.setfgcolor
          tmpchar readc 26 < if
            tmpchar readc '@' +
            outchar swap putc terminal.write
          end
          tmpchar readc 26 < ! if
            tmpchar '?' putc terminal.write
          end
          0 terminal.setbgcolor
          7 terminal.setfgcolor
        end

        1 +
        copy size read <
      end
      disc
    end

    "\e[K\r\n" terminal.write
    ret
  end

  oper proc free 1 0
    copy erow.chars . read copy NULL != if heap.free 0 end disc
    copy erow.render . read copy NULL != if heap.free 0 end disc
    copy erow.hl . read copy NULL != if heap.free 0 end disc

    heap.free
    ret
  end
end
