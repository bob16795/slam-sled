inc "stdlib/os.slm"
inc "stdlib/string.slm"
inc "stdlib/range.slm"
inc "stdlib/arrays.slm"
inc "stdlib.slm"

inc "./lib/input.slm"
inc "./lib/runner.slm"
inc "./lib/prompt.slm"
inc "./lib/status.slm"
inc "./lib/editor.slm"
inc "./lib/highlight.slm"
inc "./lib/terminal.slm"
inc "./lib/row.slm"
inc "./lib/buffer.slm"

{
oper proc processkey 1 0
  copy 'g' CTRL == if
    buffer.current read buffer.cy .
    buffer.current read buffer.numrows . read 1 -
    put disc
    
    buffer.current read buffer.cx .
    buffer.current read buffer.cy . read getrow erow.size . read
    put disc

    disc ret
  end
  copy EK_PAGE_UP == if 
    screen.height read
    do
      UP movecursor
      1 - copy
    end
    disc

    disc ret
  end
  copy EK_PAGE_DOWN == if 
    screen.height read
    do
      DOWN movecursor
      1 - copy
    end
    disc

    disc ret
  end
  copy 'n' CTRL == if
    buffer.idx copy read 1 +
    buffer.cnt /% swap disc put disc

    disc ret
  end
  copy 'p' CTRL == if
    buffer.idx copy read 1 -
    buffer.cnt /% swap disc put disc

    disc ret
  end
  copy 9 == if
    9 insertchar

    disc ret
  end
  copy iscntrl
  covr 'l' CTRL == ||
  covr 27 == || if
    disc ret
  end

  insertchar

  ret
end
}

oper proc draw 0 0
  "scroll" cstr.println
  buffer.current read
  buffer.updatescroll

  "buffer" cstr.println
  buffer.current read
  buffer.render

  "status" cstr.println
  status.render

  buffer.current read
  terminal.movecursor

  terminal.flushbuffer
  
  ret
end

oper proc main 0 0
  buffer.init
  terminal.init
  runner.init
  status.init

  {
  tmp.str (str.new) put disc

  tmp.str read
  "HOME" (os.env) (str.catc)
  "/.config/sled/rc.slm" (str.catc)
  tmp.str swap put disc

  tmp.str read str.data .
  runner.source

  tmp.str read (str.free)
  }

  argc 1 > if 
    buffer.current read
    1 (os.args)
    buffer.open
  end
  argc 1 == if 
    buffer.current read "" editor.insertrow
  end

  bool.true
  terminal.setrawmode

  draw
  do
    input.readchar
    copy if
      input.processkey 0
      draw
    end
    disc

    1
  end

  ret
end

